import axios from 'axios';
class Util {
  constructor(config, baseURL) {
    this.config = config;
    this.baseURL = baseURL;
  }

  createMultisig(nrequired, address) {
    // The createmultisig RPC creates a P2SH multi-signature address.

    // Parameter #1—the number of signatures required
    // The minimum (m) number of signatures required to spend this m-of-n multisig script

    // Parameter #2—the full public keys, or addresses for known public keys

    // An array of strings with each string being a public key or address
    // or
    // A public key against which signatures will be checked. If wallet support is enabled, this may be a P2PKH address belonging to the wallet—the corresponding public key will be substituted.
    // There must be at least as many keys as specified by the Required parameter, and there may be more keys

    // Result—P2SH address and hex-encoded redeem script

    return axios.get(`${this.baseURL}util/createMultisig/${nrequired}/${address}`)
    .then((response) => {
      return response.data.result;
    })
    .catch((error) => {
      return JSON.stringify(error.response.data.error.message);
    });
  }

  validateAddress(address) {
    // Return information about the given bitcoin address.
    //
    // Arguments:
    // 1. "address"     (string, required) The bitcoin address to validate
    //
    // Result:
    // {
    //   "isvalid" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.
    //   "address" : "address", (string) The bitcoin address validated
    //   "scriptPubKey" : "hex",       (string) The hex encoded scriptPubKey generated by the address
    //   "ismine" : true|false,        (boolean) If the address is yours or not
    //   "iswatchonly" : true|false,   (boolean) If the address is watchonly
    //   "isscript" : true|false,      (boolean) If the key is a script
    //   "pubkey" : "publickeyhex",    (string) The hex value of the raw public key
    //   "iscompressed" : true|false,  (boolean) If the address is compressed
    //   "account" : "account"         (string) DEPRECATED. The account associated with the address, "" is the default account
    //   "timestamp" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)
    //   "hdkeypath" : "keypath"       (string, optional) The HD keypath if the key is HD and available
    //   "hdmasterkeyid" : "<hash160>" (string, optional) The Hash160 of the HD master pubkey
    // }
    return axios.get(`${this.baseURL}util/validateAddress/${address}`)
    .then((response) => {
      return response.data.result;
    })
    .catch((error) => {
      return JSON.stringify(error.response.data.error.message);
    });
  }
}

export default Util;
